openapi: 3.0.0
info:
  title: Reviev platform - OpenAPI 1.0
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/platform
tags:
  - name: User
    description: User API
  - name: Company
    description: Company API
  - name: Review
    description: Review API
  - name: Interview
    description: Interview API
  - name: Commentary
    description: Commentary API

paths:
  /api/v1/user:
    post:
      operationId: createUser
      summary: Create new user
      tags:
        - User
      requestBody:
        description: Short user DTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShortUserDto'
        required: true
      responses:
        '201':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error
  /api/v1/users/page={page}&size={size}:
    get:
      tags:
        - User
      summary: Find all users
      operationId: findAllUsers
      parameters:
        - name: page
          in: path
          required: true
          schema:
            type: integer
            nullable: false
        - name: size
          in: path
          required: true
          schema:
            type: integer
            nullable: false
      responses:
        '200':
          description: Get all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error

  /api/v1/user/{userId}:
    get:
      tags:
        - User
      summary: Find users by id
      operationId: findUsersById
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
            nullable: false
      responses:
        '200':
          description: Get user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error
    delete:
      tags:
        - User
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Delete user
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error
    put:
      operationId: updateUser
      summary: Update user
      tags:
        - User
      parameters:
        - name: userId
          in: path
          description: User id to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: User DTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error

  /api/v1/company:
    post:
      operationId: createCompany
      summary: Create new company
      tags:
        - Company
      requestBody:
        description: Company DTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShortCompanyDto'
        required: true
      responses:
        '201':
          description: Created company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error
  /api/v1/companies/page={page}&size={size}:
    get:
      tags:
        - Company
      summary: Find all company
      operationId: findAllCompanys
      parameters:
        - name: page
          in: path
          required: true
          schema:
            type: integer
            nullable: false
        - name: size
          in: path
          required: true
          schema:
            type: integer
            nullable: false
      responses:
        '200':
          description: Get all company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyListDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error

  /api/v1/company/{companyId}:
    get:
      tags:
        - Company
      summary: Find company by id
      operationId: findCompanyById
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            nullable: false
      responses:
        '200':
          description: Get company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error
    delete:
      tags:
        - Company
      summary: Delete company
      operationId: deleteCompany
      parameters:
        - name: companyId
          in: path
          description: Company id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Delete company
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error
    put:
      operationId: updateCompany
      summary: Update company
      tags:
        - Company
      parameters:
        - name: companyId
          in: path
          description: Company id to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Company DTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyDto'
        required: true
      responses:
        '200':
          description: Updated company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error

  /api/v1/interview:
    post:
      operationId: createInterview
      summary: Create new interview
      tags:
        - Interview
      requestBody:
        description: Interview DTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShortInterviewDto'
        required: true
      responses:
        '201':
          description: Created interview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error
  /api/v1/interviews/page={page}&size{size}:
    get:
      tags:
        - Interview
      summary: Find all interview
      operationId: findAllInterviews
      parameters:
        - name: page
          in: path
          required: true
          schema:
            type: integer
            nullable: false
        - name: size
          in: path
          required: true
          schema:
            type: integer
            nullable: false
      responses:
        '200':
          description: Get all interview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewListDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error

  /api/v1/interview/{interviewId}:
    get:
      tags:
        - Interview
      summary: Find interview by id
      operationId: findInterviewById
      parameters:
        - name: interviewId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            nullable: false
      responses:
        '200':
          description: Get interview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error
    delete:
      tags:
        - Interview
      summary: Delete interview
      operationId: deleteInterview
      parameters:
        - name: interviewId
          in: path
          description: Company id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Delete interview
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error
    put:
      operationId: updateInterview
      summary: Update interview
      tags:
        - Interview
      parameters:
        - name: interviewId
          in: path
          description: Interview by id to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Interview DTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewDto'
        required: true
      responses:
        '200':
          description: Interview updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error


  /api/v1/review:
    post:
      operationId: createReview
      summary: Create new interview
      tags:
        - Review
      requestBody:
        description: Review DTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShortReviewDto'
        required: true
      responses:
        '201':
          description: Created review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error
  /api/v1/reviews/page={page}&size{size}:
    get:
      tags:
        - Review
      summary: find all review
      operationId: findAllReviews
      parameters:
        - name: page
          in: path
          required: true
          schema:
            type: integer
            nullable: false
        - name: size
          in: path
          required: true
          schema:
            type: integer
            nullable: false
      responses:
        '200':
          description: Get all review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewListDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error

  /api/v1/review/{reviewId}:
    get:
      tags:
        - Review
      summary: Find review by id
      operationId: findReviewById
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: string
            format: uuid
            nullable: false
      responses:
        '200':
          description: Get review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error
    delete:
      tags:
        - Review
      summary: Delete review
      operationId: deleteReview
      parameters:
        - name: reviewId
          in: path
          description: Review id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Delete review
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error
    put:
      operationId: updateReview
      summary: Update review
      tags:
        - Review
      parameters:
        - name: reviewId
          in: path
          description: Review by id to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Review DTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewDto'
        required: true
      responses:
        '200':
          description: Review updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error


# --- Commentary ---
  /api/v1/comment:
    post:
      operationId: createCommentary
      summary: Create new Commentary
      tags:
        - Commentary
      requestBody:
        description: Commentary DTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShortCommentaryDto'
        required: true
      responses:
        '201':
          description: Created Commentary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentaryDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error



# --- Dtos ---
components:
  schemas:
    # --- User ---
    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User id
        firstName:
          type: string
          description: User first name
        lastName:
          type: string
          description: User last name
        password:
          type: string
          description: User password
        email:
          type: string
          description: User email
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleDto'
        specialities:
          type: string
          enum:
            - FRONTEND
            - BACKEND
        reviewsReceiving:
          type: array
          items:
            $ref: '#/components/schemas/ReviewDto'
        reviewsStudent:
          type: array
          items:
            $ref: '#/components/schemas/ReviewDto'
        socials:
          type: array
          items:
            $ref: '#/components/schemas/SocialDto'

    UserListDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        totalElements:
          type: number
        totalPages:
          type: number
        currentPage:
          type: number
        last:
          type: boolean
        numberOfElements:
          type: number
        first:
          type: boolean
        empty:
          type: boolean

    ShortUserDto:
      type: object
      properties:
        firstName:
          type: string
          description: User first name
        lastName:
          type: string
          description: User last name
        password:
          type: string
          description: User password
        email:
          type: string
          description: User email


    RoleDto:
      type: object
      properties:
        role:
          type: string
          description: Role name

    SocialDto:
      type: object
      properties:
        name:
          type: string
          description: Social name
        link:
          type: string
          description: Social link

    CommentaryDto:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserDto'
        text:
          type: string
        likes:
          type: number
        dislikes:
          type: number
        answers:
          type: array
          items:
            $ref: '#/components/schemas/CommentaryDto'
        create:
          type: string


    ShortCommentaryDto:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserDto'
        text:
          type: string
        create:
          type: string



    CommentaryListDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CommentaryDto'
        totalElements:
          type: number
        totalPages:
          type: number
        currentPage:
          type: number
        last:
          type: boolean
        numberOfElements:
          type: number
        first:
          type: boolean
        empty:
          type: boolean

#   --Company--
    CompanyDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Company id
        name:
          type: string
        jobLink:
          type: string
        rating:
          type: number
        commentaries:
          type: array
          items:
            $ref: '#/components/schemas/CommentaryDto'
        interviews:
          type: array
          items:
            $ref: '#/components/schemas/InterviewDto'

    ShortCompanyDto:
      type: object
      properties:
        name:
          type: string
        jobLink:
          type: string


    CompanyListDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CompanyDto'
        totalElements:
          type: number
        totalPages:
          type: number
        currentPage:
          type: number
        last:
          type: boolean
        numberOfElements:
          type: number
        first:
          type: boolean
        empty:
          type: boolean

    InterviewDto:
      type: object
      properties:
        jobTitle:
          type: string
        jobLink:
          type: string
        company:
          $ref: '#/components/schemas/CompanyDto'
        user:
          $ref: '#/components/schemas/UserDto'
        description:
          type: string
        money:
          type: integer
        commentaries:
          type: array
          items:
            $ref: '#/components/schemas/CommentaryDto'
        videoLink:
          type: string

    ShortInterviewDto:
      type: object
      properties:
        jobTitle:
          type: string
        jobLink:
          type: string

    InterviewListDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/InterviewDto'
        totalElements:
          type: number
        totalPages:
          type: number
        currentPage:
          type: number
        last:
          type: boolean
        numberOfElements:
          type: number
        first:
          type: boolean
        empty:
          type: boolean

    ReviewDto:
      type: object
      properties:
        theme:
          type: string
        jobLink:
          type: string
        reviewer:
          $ref: '#/components/schemas/UserDto'
        student:
          $ref: '#/components/schemas/UserDto'
        time:
          type: string
        link:
          type: string
        speciality:
          type: string
          enum:
            - FRONTEND
            - BACKEND
        create:
          type: string

    ShortReviewDto:
      type: object
      properties:
        theme:
          type: string
        jobLink:
          type: string

    ReviewListDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ReviewDto'
        totalElements:
          type: number
        totalPages:
          type: number
        currentPage:
          type: number
        last:
          type: boolean
        numberOfElements:
          type: number
        first:
          type: boolean
        empty:
          type: boolean
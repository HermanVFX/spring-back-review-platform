openapi: 3.0.0
info:
  title: Reviev platform - OpenAPI 1.0
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/platform
tags:
  - name: User
    description: User API
  - name: Company
    description: Company API
  - name: Review
    description: Review API
  - name: Interview
    description: Interview API

paths:
  /v1/user:
    post:
      operationId: createUser
      summary: Create new user
      tags:
        - User
      requestBody:
        description: Short user DTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShortUserDto'
        required: true
      responses:
        '201':
          description: created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error
  /v1/user/{page}&{size}:
    get:
      tags:
        - User
      summary: find all users
      operationId: findAllUsers
      parameters:
        - name: page
          in: path
          required: true
          schema:
            type: integer
            nullable: false
        - name: size
          in: path
          required: true
          schema:
            type: integer
            nullable: false
      responses:
        '200':
          description: Get all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error

  /api/v1/user/{userId}:
    get:
      tags:
        - User
      summary: find users by id
      operationId: findUsersById
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
            nullable: false
      responses:
        '200':
          description: Get user
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error
    delete:
      tags:
        - User
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Delete user
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error
    put:
      operationId: updateUser
      summary: Update user
      tags:
        - User
      parameters:
        - name: userId
          in: path
          description: User id to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: User DTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        '200':
          description: updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Invalid request
        '404':
          description: Resource not found
        '405':
          description: Method is not available
        '500':
          description: Server error
# --- Dtos ---
components:
  schemas:
    # --- User ---
    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User id
        firstName:
          type: string
          description: User first name
        lastName:
          type: string
          description: User last name
        email:
          type: string
          description: User email
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleDto'
        specialities:
          type: string
#          nullable: true
          enum:
            - FRONTEND
            - BACKEND
        reviewsReceiving:
          type: array
          items:
            $ref: '#/components/schemas/ReviewDto'
        reviewsStudent:
          type: array
          items:
            $ref: '#/components/schemas/ReviewDto'
        socials:
          type: array
          items:
            $ref: '#/components/schemas/SocialDto'

    UserListDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        totalElements:
          type: number
        totalPages:
          type: number
        last:
          type: boolean
        numberOfElements:
          type: number
        first:
          type: boolean
        empty:
          type: boolean

    ShortUserDto:
      type: object
      properties:
        firstName:
          type: string
          description: User first name
        lastName:
          type: string
          description: User last name
        email:
          type: string
          description: User email

    RoleDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Role id
        role:
          type: string
          description: Role name

    ReviewDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Role id
        theme:
          type: string
          description: Theme name
        reviewer:
          $ref: '#/components/schemas/UserDto'
        student:
          $ref: '#/components/schemas/UserDto'
        time:
          type: string
          description: Review time
        link:
          type: string
          description: Review link
        speciality:
          type: string
          enum:
            - FRONTEND
            - BACKEND

    SocialDto:
      type: object
      properties:
#        id:
#          type: string
#          format: uuid
#          description: Social id
        name:
          type: string
          description: Social name
        link:
          type: string
          description: Social link
#        user:
#          $ref: '#/components/schemas/UserDto'

#    PaginationDto:
#      type: object
#      properties:
#        page:
#          type: integer
#          description: Number page
#        size:
#          type: integer
#          description: Size all pages
